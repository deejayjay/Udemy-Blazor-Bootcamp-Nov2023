@page "/product"

@inject IProductRepository _productRepository
@inject IJSRuntime _jsRuntime

<_DeleteConfirmation OnDeleteConfirm="@HandleConfirmDelete" IsParentComponentProcessing="@IsLoading" />
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Product List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="product/create" class="btn btn-primary form-control">Add New Product</a>
    </div>
    <div class="col-12 mt-4">
        @if (Products.Count() > 0)
        {
            <table class="table table-bordered border-dark">
                <thead>
                    <tr class="bg-dark text-white">
                        <th>Name</th>
                        <th>Is Shop Favorite</th>
                        <th>Is Customer Favorite</th>
                        <th>Category</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in Products)
                    {
                        <tr>
                            <td>@product.Name</td>
                            <td>
                                <input type="checkbox" disabled checked="@product.IsShopFavorite" />
                            </td>
                            <td>
                                <input type="checkbox" disabled checked="@product.IsCustomerFavorite" />
                            </td>
                            <td>@product.Category.Name</td>
                            <td>
                                <NavLink href="@($"/product/edit/{product.Id}")" class="btn btn-sm btn-info">Edit</NavLink>
                                <button class="btn btn-sm btn-danger"
                                        @onclick="() => ShowDeleteConfirmationModal(product.Id)">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                <_Loader />
            }
            else
            {
                <p class="text-center">No products found</p>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<ProductDto> Products { get; set; } = new List<ProductDto>();
    private bool IsLoading { get; set; }
    private int DeleteProductId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProductsAsync();
        }
    }

    private async Task LoadProductsAsync()
    {
        IsLoading = true;
        StateHasChanged();

        Products = await _productRepository.GetAllAsync();

        IsLoading = false;
        StateHasChanged();
    }

    private async Task ShowDeleteConfirmationModal(int id)
    {
        DeleteProductId = id;
        await _jsRuntime.InvokeVoidAsync("showDeleteConfirmationModal");
    }

    private async Task HandleConfirmDelete(bool isConfirmed)
    {
        if (isConfirmed && DeleteProductId != 0)
        {
            IsLoading = true;

            // Delete product from the database
            await _productRepository.DeleteAsync(DeleteProductId);
            await LoadProductsAsync();
            await _jsRuntime.InvokeVoidAsync("hideDeleteConfirmationModal");

            IsLoading = false;
        }
    }
}
