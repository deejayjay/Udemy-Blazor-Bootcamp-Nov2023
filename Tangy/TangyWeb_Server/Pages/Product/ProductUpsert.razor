@page "/product/create"
@page "/product/edit/{id:int}"

@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager

<div class="row my-2">
    <h3 class="card-title text-success mb-3">@Title Product</h3>
    <div class="col-md-10">
        @if (!IsLoading)
        {
            <EditForm Model="@Product" OnValidSubmit="@UpsertProduct">
                <DataAnnotationsValidator />
                @* <ValidationSummary /> *@
                <div class="form-group mb-3">
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" @bind-Value="Product.Name" class="form-control" />
                    <ValidationMessage For="() => Product.Name" />
                </div>
                <div class="form-group mb-3">
                    <label for="color" class="form-label">Color</label>
                    <InputText id="color" @bind-Value="Product.Color" class="form-control" />
                </div>
                <div class="form-group mb-3">
                    <label for="description" class="form-label">Description</label>
                    <InputTextArea id="description" @bind-Value="Product.Description" class="form-control" />
                    <ValidationMessage For="() => Product.Description" />
                </div>
                <div class="row py-2">
                    <div class="col-4 form-group">
                        <label class="form-check-label" for="category">Category</label>
                        <InputSelect id="category"
                                     @bind-Value="Product.CategoryId"
                                     class="form-select">
                            <option value="0" disabled selected>-- Select Category --</option>
                            @foreach (var category in Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Product.CategoryId" />
                    </div>
                    <div class="col-4 form-group align-self-end">
                        <div class="form-check">
                            <InputCheckbox id="shopFavorite" @bind-Value="Product.IsShopFavorite" class="form-check-input" />
                            <label class="form-check-label" for="shopFavorite">Is Shop Favorite</label>
                        </div>
                    </div>
                    <div class="col-4 form-group align-self-end">
                        <div class="form-check">
                            <InputCheckbox id="custFavorite"
                                           @bind-Value="Product.IsCustomerFavorite"
                                           class="form-check-input" />
                            <label class="form-check-label" for="custFavorite">Is Customer Favorite</label>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <button class="btn btn-dark" type="submit">@ButtonText</button>
                    <NavLink href="/product" class="btn btn-secondary">Back to Products</NavLink>
                </div>
            </EditForm>
        }
        else
        {
            <_Loader />
        }
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private ProductDto Product { get; set; } = new ProductDto();
    private IEnumerable<CategoryDto> Categories { get; set; } = new List<CategoryDto>();
    private string Title { get; set; } = "Create";
    private bool IsLoading { get; set; }
    private string ButtonText => Product.Id == 0 ? "Create" : "Update";

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProductAsync();
        }
    }

    private async Task LoadProductAsync()
    {
        IsLoading = true;
        StateHasChanged();

        Categories = await _categoryRepository.GetAllAsync();

        if (Id == 0)
        {
            // Create
            Title = "Create";
        }
        else
        {
            // Edit
            Title = "Edit";
            Product = await _productRepository.GetAsync(Id);
        }

        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpsertProduct()
    {
        // Create Product
        if (Product.Id == 0)
        {
            await _productRepository.CreateAsync(Product);
        }
        // Update Product
        else
        {
            await _productRepository.UpdateAsync(Product);
        }
        _navigationManager.NavigateTo("/product");
    }
}
