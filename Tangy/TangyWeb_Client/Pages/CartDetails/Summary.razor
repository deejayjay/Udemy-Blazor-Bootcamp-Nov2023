@page "/summary"

@inject IProductService _productService
@inject ILocalStorageService _localStorageService
@inject IJSRuntime _jsRuntime

@if (IsProcessing)
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
        <img src="images/ajax-loader.gif" />
    </div>
}
else
{
    <div class="mt-4 mx-4 px-md-5 mx-md-5 p-1">

        <div class="row p-2 my-3">
            <div class="col-12 col-lg-7 p-4">
                <div class="row px-2 text-success ">
                    <div class="col-8 py-1"><p style="font-size:x-large;margin:0px;">Order Summary</p></div>
                    <div class="col-4 p-0" style="text-align:right">
                        <a href="/cart" class="btn btn-secondary btn-block">Back to cart</a>
                    </div>
                </div>

                @foreach (var orderDetail in Order.OrderDetails)
                {
                    <div class="row border p-1 m-1">

                        <div class="col-3 col-md-2 ">
                            <img src="@orderDetail.Product.ImageUrl"
                                 alt="@orderDetail.ProductName"
                                 class="w-100 rounded img-thumbnail">
                        </div>
                        <div class="col-5 col-md-5 ">
                            <span class="">Product : @orderDetail.ProductName </span><br />
                            <span class="pt-1">Size : @orderDetail.Size</span><br />
                            <span class="pt-1">Count : @orderDetail.Count</span><br />

                        </div>
                        <div class="col-4 col-md-5 " style="text-align:right;">
                            <h4 class="text-secondary font-weight-bold pt-2">
                                @((orderDetail.Count * orderDetail.Price).ToString("C"))
                            </h4>
                        </div>
                    </div>
                }

                <div class="row" style="text-align:right">
                    <div class="col-12 px-3">
                        <h3> Order Total : <span class="text-secondary">@Order.OrderHeader.OrderTotal.ToString("C")</span> </h3>
                    </div>
                </div>
            </div>

            <div class="col-12 col-lg-5 p-4 ml-4 ml-md-0 mt-4 mt-md-0 border">
                <EditForm method="post"
                          Model="@Order.OrderHeader"
                          OnValidSubmit="HandleCheckout">
                    <DataAnnotationsValidator />
                    <div class="row px-2 text-success border-bottom">
                        <div class="col-7 py-1">
                            <p style="font-size:x-large;margin:0px;">Enter Details</p>
                        </div>
                    </div>

                    <div class="form-group pt-2 mb-2">
                        <label class="form-label">Name</label>
                        <InputText class="form-control" @bind-Value="@Order.OrderHeader.Name" />
                        <ValidationMessage For="() => Order.OrderHeader.Name" />
                    </div>
                    <div class="form-group pt-2 mb-2">
                        <label class="form-label">Phone</label>
                        <InputText class="form-control" @bind-Value="@Order.OrderHeader.PhoneNumber" />
                        <ValidationMessage For="() => Order.OrderHeader.PhoneNumber" />
                    </div>
                    <div class="form-group pt-2 mb-2">
                        <label class="form-label">Email</label>
                        <InputText class="form-control" @bind-Value="@Order.OrderHeader.Email" />
                        <ValidationMessage For="() => Order.OrderHeader.Email" />
                    </div>
                    <div class="form-group pt-2 mb-2">
                        <label class="form-label">Street Address</label>
                        <InputText class="form-control" @bind-Value="@Order.OrderHeader.StreetAddress" />
                        <ValidationMessage For="() => Order.OrderHeader.StreetAddress" />
                    </div>
                    <div class="form-group pt-2 mb-2">
                        <label class="form-label">City</label>
                        <InputText class="form-control" @bind-Value="@Order.OrderHeader.City" />
                        <ValidationMessage For="() => Order.OrderHeader.City" />
                    </div>
                    <div class="form-group pt-2 mb-2">
                        <label class="form-label">State</label>
                        <InputText class="form-control" @bind-Value="@Order.OrderHeader.State" />
                        <ValidationMessage For="() => Order.OrderHeader.State" />
                    </div>
                    <div class="form-group pt-2">
                        <label class="form-label">Postal Code</label>
                        <InputText class="form-control" @bind-Value="@Order.OrderHeader.PostalCode" />
                        <ValidationMessage For="() => Order.OrderHeader.PostalCode" />
                    </div>


                    <div class="form-group pt-2">
                        <button type="submit" class="btn btn-success form-control">Checkout Now</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}


@code {
    private OrderDto Order { get; set; } = new();
    private bool IsProcessing { get; set; }

    private IEnumerable<ProductDto> Products { get; set; } = new List<ProductDto>();

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;

        Products = await _productService.GetAllAsync();
        List<ShoppingCart> cartItems = await _localStorageService.GetItemAsync<List<ShoppingCart>>(Sd.ShoppingCart);
        Order = new()
            {
                OrderHeader = new()
                {
                    OrderTotal = 0,
                    Status = Sd.Status_Pending
                },
                OrderDetails = new List<OrderDetailDto>()
            };

        foreach (var item in cartItems)
        {
            var product = Products.FirstOrDefault(p => p.Id == item.ProductId);
            var productPrice = product?.ProductPrices.FirstOrDefault(p => p.Id == item.ProductPriceId);

            OrderDetailDto orderDetailDto = new()
                {
                    ProductName = product?.Name ?? string.Empty,
                    Product = product ?? new ProductDto(),
                    ProductId = item.ProductId,
                    Size = productPrice?.Size ?? string.Empty,
                    Count = item.Count,
                    Price = productPrice?.Price ?? 0
                };

            Order.OrderDetails.Add(orderDetailDto);
        }

        // Calculate the order total
        Order.OrderHeader.OrderTotal = Order.OrderDetails.Sum(o => o.Price * o.Count);

        IsProcessing = false;
    }

    private async Task HandleCheckout()
    {
        
    }
}
